 const dayNames = ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"];
        const IPEauditories = ["502-2 –∫.", "601-2 –∫.", "603-2 –∫.", "604-2 –∫.", "605-2 –∫.", "607-2 –∫.", "611-2 –∫.", "613-2 –∫.", "615-2 –∫."];

        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        let currentWeekNumber = null;
        let teachersData = null;
        let teacherSchedulesData = null;

        async function fetchJson(url) {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }
            return response.json();
        }

        async function loadInitialData() {
            document.getElementById('loading').style.display = 'block';
            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
                currentWeekNumber = await fetchJson('https://iis.bsuir.by/api/v1/schedule/current-week');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                const teachers = await fetchJson('https://iis.bsuir.by/api/v1/employees/all');
                teachersData = teachers;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
                teacherSchedulesData = {};
                const promises = teachers.map(async (teacher) => {
                    try {
                        const schedule = await fetchJson(`https://iis.bsuir.by/api/v1/employees/schedule/${teacher.urlId}`);
                        teacherSchedulesData[teacher.urlId] = schedule;
                    } catch (error) {
                        console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è ${teacher.fio}:`, error);
                        teacherSchedulesData[teacher.urlId] = { schedules: {}, previousSchedules: {} };
                    }
                });
                
                await Promise.all(promises);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                const today = new Date();
                //today.setHours(0, 0, 0, 0);
                const yyyy = today.getFullYear();
                const mm = String(today.getMonth() + 1).padStart(2, '0');
                const dd = String(today.getDate()).padStart(2, '0');
                document.getElementById('datePicker').value = `${yyyy}-${mm}-${dd}`;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏
                const dayName = dayNames[today.getDay()]; 
                document.getElementById('weekDisplay').textContent = `${today.toLocaleDateString()} (${dayName}), ${currentWeekNumber}-—è —É—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è üóìÔ∏è`;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
                await updateSchedule(today, currentWeekNumber);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
                alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
            } finally {
                document.getElementById('loading').style.display = 'none';
            }
        }

       function calculateWeekNumber(selectedDate) {
    if (!currentWeekNumber) return null;
    
    const today = new Date();
    //today.setHours(0, 0, 0, 0);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    const getMonday = (date) => {
        const day = date.getDay();
        const diff = date.getDate() - day + (day === 0 ? -6 : 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
        return new Date(date.setDate(diff));
    };
    
    const currentMonday = getMonday(new Date(today));
    const selectedMonday = getMonday(new Date(selectedDate));
    
    // –†–∞–∑–Ω–∏—Ü–∞ –≤ –Ω–µ–¥–µ–ª—è—Ö –º–µ–∂–¥—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π –∏ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ–π
    const diffTime = selectedMonday - currentMonday;
    const diffWeeks = Math.round(diffTime / (1000 * 60 * 60 * 24 * 7));
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ —Å —É—á—ë—Ç–æ–º 4-–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    let weekNumber = ((currentWeekNumber - 1) + diffWeeks) % 4 + 1;
    return weekNumber <= 0 ? weekNumber + 4 : weekNumber;
}

      function parseDate(dateStr) {
            if (!dateStr) return null;
    try {
        const parts = dateStr.split('.');
        if (parts.length !== 3) return null;
        
        const day = parseInt(parts[0], 10);
        const month = parseInt(parts[1], 10) - 1; // –ú–µ—Å—è—Ü—ã 0-11
        const year = parseInt(parts[2], 10);
        
        return new Date(year, month, day);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã:', dateStr, error);
        return null;
    }
}

        function timeInRange(start, end, target) {
            return start <= target && target <= end;
        }

        async function getScheduleForAuditory(auditory, date, weekNumber) {
            const schedule = {};
            const dayName = dayNames[date.getDay()];
            
            if (!teachersData || !teacherSchedulesData) return schedule;

            for (const teacher of teachersData) {
                const teacherSchedule = teacherSchedulesData[teacher.urlId] || {};
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Ç–µ–∫—É—â–µ–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ)
                for (const scheduleType of ['schedules', 'previousSchedules']) {
                    const daySchedule = teacherSchedule[scheduleType]?.[dayName] || [];
                    
                    for (const lesson of daySchedule) {
                        const weekNumbers = lesson?.weekNumber || [];
                        
                        if (lesson.auditories && lesson.auditories.includes(auditory) && 
                            Array.isArray(weekNumbers) && weekNumbers.includes(weekNumber)) {
                            
                            const startDate = parseDate(lesson.startLessonDate);
                            const endDate = parseDate(lesson.endLessonDate);
                            const lessonDate = parseDate(lesson.dateLesson);
                            
                            if ((startDate && endDate && timeInRange(startDate, endDate, date)) || 
                                (lessonDate && date.toDateString() === lessonDate.toDateString())) {
                                
                                const timeRange = `${lesson.startLessonTime}‚Äî${lesson.endLessonTime}`;
                                schedule[timeRange] = `${lesson.subject} (${lesson.lessonTypeAbbrev}) ${teacher.fio} ${lesson.studentGroups?.map(g => `–≥—Ä. ${g.name}`).join(', ') || '–Ω–µ—Ç –≥—Ä—É–ø–ø—ã'}`;
                            }
                        }
                    }
                }
            }
            
            return schedule;
        }

        async function updateSchedule(date, weekNumber) {
    if (!weekNumber) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏');
        return;
    }

    document.getElementById('loading').style.display = 'block';
    try {
        const schedulesContainer = document.getElementById('schedules');
        schedulesContainer.innerHTML = '';
        
        const promises = IPEauditories.map(async (auditory) => {
            const schedule = await getScheduleForAuditory(auditory, date, weekNumber);
            return { auditory, schedule };
        });
        
        const results = await Promise.all(promises);
        
        for (const result of results) {
            const audContainer = document.createElement('div');
            audContainer.className = 'auditory';
            audContainer.innerHTML = `‚Äî‚Äî‚Äî<strong>${result.auditory}</strong>‚Äî‚Äî‚Äî`;
            schedulesContainer.appendChild(audContainer);
            
            const sortedTimes = Object.keys(result.schedule).sort();
            for (const time of sortedTimes) {
                const lessonDiv = document.createElement('div');
                lessonDiv.className = 'lesson';
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–Ω—è—Ç–∏—è
                const lessonText = result.schedule[time];
                
                // –ó–∞–º–µ–Ω—è–µ–º –Ω–æ–º–µ—Ä–∞ –≥—Ä—É–ø–ø –Ω–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                const textWithLinks = lessonText.replace(
                    /–≥—Ä\. (\d+)/g, 
                    '<a href="https://iis.bsuir.by/schedule/$1" target="_blank" class="group-link">–≥—Ä. $1</a>'
                );
                
                lessonDiv.innerHTML = `${time} ‚Äî‚Äî ${textWithLinks}`;
                audContainer.appendChild(lessonDiv);
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
    } finally {
        document.getElementById('loading').style.display = 'none';
    }
}

       function copyAndSend() {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ weekDisplay
    const weekDisplayText = document.getElementById('weekDisplay').innerText;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ schedules
    const schedulesText = document.getElementById('schedules').innerText;
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–æ–º (–¥–≤–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –Ω–∏–º–∏)
    const textToCopy = `${weekDisplayText}\n\n${schedulesText}`;
    
    // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    navigator.clipboard.writeText(textToCopy).then(() => {
        alert('–¢–µ–∫—Å—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        const telegramLink = `tg://msg?text=${encodeURIComponent(textToCopy)}`;
        window.open(telegramLink, '_blank');
    }).catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: ', err);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
    });
}

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', () => {
            loadInitialData();
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã
            document.getElementById('datePicker').addEventListener('change', async (e) => {
                const selectedDate = new Date(e.target.value);
                selectedDate.setHours(0, 0, 0, 0);
                
                const weekNumber = calculateWeekNumber(selectedDate);
                const dayName = dayNames[selectedDate.getDay()]; 
                document.getElementById('weekDisplay').textContent = `${selectedDate.toLocaleDateString()} (${dayName}), ${weekNumber}-—è —É—á–µ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è üóìÔ∏è`;
                
                await updateSchedule(selectedDate, weekNumber);
            });
        });
